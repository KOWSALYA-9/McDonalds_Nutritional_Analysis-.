

---

### Python Code for Data Validation

python
import pandas as pd
import numpy as np

# Load the dataset (replace 'Nutritional_Dataset.csv' with your file path)
df = pd.read_csv('Nutritional_Dataset.csv')

# Data Validation Function
def data_validation(df):
    print("========== DATA VALIDATION REPORT ==========")
    
    # 1. General Dataset Information
    print("\n1. General Information:")
    print(f"Number of Rows: {df.shape[0]}")
    print(f"Number of Columns: {df.shape[1]}")
    print(f"Columns: {list(df.columns)}")
    print(f"Data Types:\n{df.dtypes}")
    
    # 2. Missing Values
    print("\n2. Missing Values:")
    missing_values = df.isnull().sum()
    if missing_values.sum() > 0:
        print(missing_values[missing_values > 0])
    else:
        print("No missing values detected.")
    
    # 3. Duplicate Rows
    print("\n3. Duplicate Rows:")
    duplicate_count = df.duplicated().sum()
    if duplicate_count > 0:
        print(f"{duplicate_count} duplicate rows detected.")
    else:
        print("No duplicate rows detected.")
    
    # 4. Summary Statistics
    print("\n4. Summary Statistics for Numeric Columns:")
    print(df.describe())

    # 5. Outliers Detection using IQR
    print("\n5. Outlier Detection (Using IQR Method):")
    numeric_cols = df.select_dtypes(include=['float64', 'int64']).columns
    for col in numeric_cols:
        q1 = df[col].quantile(0.25)
        q3 = df[col].quantile(0.75)
        iqr = q3 - q1
        lower_bound = q1 - 1.5 * iqr
        upper_bound = q3 + 1.5 * iqr
        outliers = df[(df[col] < lower_bound) | (df[col] > upper_bound)]
        print(f"{col}: {len(outliers)} outliers detected.")
    
    # 6. Unique Value Check for Categorical Columns
    print("\n6. Unique Values in Categorical Columns:")
    categorical_cols = df.select_dtypes(include=['object']).columns
    for col in categorical_cols:
        print(f"{col}: {df[col].nunique()} unique values")
    
    # 7. Validation of Specific Columns (e.g., "Calories" should be positive)
    print("\n7. Column-Specific Validations:")
    if (df['Calories'] < 0).any():
        print("Invalid 'Calories' values detected (negative values).")
    else:
        print("'Calories' values are valid.")

    # Additional checks for percentage columns
    percentage_columns = [col for col in df.columns if '(% Daily Value)' in col]
    for col in percentage_columns:
        if (df[col] < 0).any() or (df[col] > 100).any():
            print(f"Invalid percentage values in '{col}' detected (values not in 0-100).")
        else:
            print(f"'{col}' values are valid (within 0-100).")
    
    print("\n========== END OF REPORT ==========")

# Run the Data Validation
data_validation(df)


-

---

### Sample Output (Example):


========== DATA VALIDATION REPORT ==========

1. General Information:
Number of Rows: 250
Number of Columns: 12
Columns: ['Category', 'Item', 'Serving Size', 'Calories', 'Total Fat', ...]
Data Types:
Category               object
Item                   object
Calories              float64
...

2. Missing Values:
Calories         3
Total Fat        1

3. Duplicate Rows:
5 duplicate rows detected.

4. Summary Statistics for Numeric Columns:
           Calories     Total Fat  ...
count  247.000000   249.000000  ...
mean   220.450000    12.560000  ...

5. Outlier Detection (Using IQR Method):
Calories: 4 outliers detected.
Total Fat: 3 outliers detected.

6. Unique Values in Categorical Columns:
Category: 8 unique values
Item: 150 unique values

7. Column-Specific Validations:
'Calories' values are valid.
'Vitamin A (% Daily Value)' values are valid (within 0-100).

========== END OF REPORT ==========


